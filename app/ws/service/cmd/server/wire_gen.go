// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"go.opentelemetry.io/otel/sdk/trace"
	"kratos_sim/app/ws/service/internal/biz"
	"kratos_sim/app/ws/service/internal/conf"
	"kratos_sim/app/ws/service/internal/data"
	"kratos_sim/app/ws/service/internal/pkg/websocket"
	"kratos_sim/app/ws/service/internal/server"
	"kratos_sim/app/ws/service/internal/service"

	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confServer *conf.Server, confData *conf.Data, registry *conf.Registry, tp *trace.TracerProvider,logger log.Logger) (*kratos.App, func(), error) {
	db := data.NewDB(confData, logger)
	dataData, cleanup, err := data.NewData(db, logger)
	if err != nil {
		return nil, nil, err
	}
	msgRepo := data.NewMessageRepo(dataData, logger)
	msgUseCase := biz.NewMessageUseCase(msgRepo, logger)
	wsClient := websocket.NewClient()
	wsService := service.NewWsService(wsClient, msgUseCase, logger)
	grpcServer := server.NewGRPCServer(confServer, wsService, logger, tp)
	wsServer := server.NewWebsocketServer(confServer, wsService, logger)
	rr := server.NewRegistrar(registry)
	app := newApp(logger, grpcServer, wsServer, rr)
	return app, func() {
		cleanup()
	}, nil
}
