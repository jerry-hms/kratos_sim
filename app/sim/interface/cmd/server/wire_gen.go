// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"go.opentelemetry.io/otel/sdk/trace"
	"kratos_sim/app/sim/interface/internal/biz"
	"kratos_sim/app/sim/interface/internal/conf"
	"kratos_sim/app/sim/interface/internal/data"
	server2 "kratos_sim/app/sim/interface/internal/server"
	"kratos_sim/app/sim/interface/internal/service"

	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confServer *conf.Server, registry *conf.Registry, confData *conf.Data, confAuth *conf.Auth, logger log.Logger, tracerProvider *trace.TracerProvider) (*kratos.App, func(), error) {
	discovery := data.NewDiscovery(registry)
	userClient := data.NewUserServiceClient(discovery, confAuth, tracerProvider)
	wsClient := data.NewWsServiceClient(discovery, tracerProvider)
	sessionClient := data.NewSessionClient(discovery, tracerProvider)
	dataData, cleanup, err := data.NewData(userClient, wsClient, sessionClient, logger)
	if err != nil {
		return nil, nil, err
	}
	userRepo := data.NewUserRepo(dataData, logger)
	userUseCase := biz.NewUserUseCase(userRepo, logger)
	authUseCase := biz.NewAuthUseCase(userRepo, confAuth, logger)
	wcRepo := data.NewWsRepo(dataData, logger)
	sessionRepo := data.NewSessionRepo(dataData, logger)
	wcUseCase := biz.NewWsUseCase(wcRepo, userRepo, sessionRepo, logger)
	simService := service.NewSimService(userUseCase, authUseCase, wcUseCase, logger)
	grpcServer := server2.NewGRPCServer(confServer, simService, tracerProvider, logger)
	httpServer := server2.NewHTTPServer(confServer, simService, confAuth, tracerProvider, logger)
	app := newApp(logger, grpcServer, httpServer)
	return app, func() {
		cleanup()
	}, nil
}
