// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: v1/sim.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Sim_Register_FullMethodName = "/api.sim.v1.Sim/Register"
	Sim_Login_FullMethodName    = "/api.sim.v1.Sim/Login"
	Sim_Chat_FullMethodName     = "/api.sim.v1.Sim/Chat"
	Sim_BindWs_FullMethodName   = "/api.sim.v1.Sim/BindWs"
)

// SimClient is the client API for Sim service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SimClient interface {
	Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterReply, error)
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginReply, error)
	Chat(ctx context.Context, in *ChatReq, opts ...grpc.CallOption) (*ChatReply, error)
	BindWs(ctx context.Context, in *BindWsReq, opts ...grpc.CallOption) (*BindWsReply, error)
}

type simClient struct {
	cc grpc.ClientConnInterface
}

func NewSimClient(cc grpc.ClientConnInterface) SimClient {
	return &simClient{cc}
}

func (c *simClient) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterReply, error) {
	out := new(RegisterReply)
	err := c.cc.Invoke(ctx, Sim_Register_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginReply, error) {
	out := new(LoginReply)
	err := c.cc.Invoke(ctx, Sim_Login_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simClient) Chat(ctx context.Context, in *ChatReq, opts ...grpc.CallOption) (*ChatReply, error) {
	out := new(ChatReply)
	err := c.cc.Invoke(ctx, Sim_Chat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simClient) BindWs(ctx context.Context, in *BindWsReq, opts ...grpc.CallOption) (*BindWsReply, error) {
	out := new(BindWsReply)
	err := c.cc.Invoke(ctx, Sim_BindWs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SimServer is the server API for Sim service.
// All implementations must embed UnimplementedSimServer
// for forward compatibility
type SimServer interface {
	Register(context.Context, *RegisterReq) (*RegisterReply, error)
	Login(context.Context, *LoginReq) (*LoginReply, error)
	Chat(context.Context, *ChatReq) (*ChatReply, error)
	BindWs(context.Context, *BindWsReq) (*BindWsReply, error)
	mustEmbedUnimplementedSimServer()
}

// UnimplementedSimServer must be embedded to have forward compatible implementations.
type UnimplementedSimServer struct {
}

func (UnimplementedSimServer) Register(context.Context, *RegisterReq) (*RegisterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedSimServer) Login(context.Context, *LoginReq) (*LoginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedSimServer) Chat(context.Context, *ChatReq) (*ChatReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Chat not implemented")
}
func (UnimplementedSimServer) BindWs(context.Context, *BindWsReq) (*BindWsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindWs not implemented")
}
func (UnimplementedSimServer) mustEmbedUnimplementedSimServer() {}

// UnsafeSimServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SimServer will
// result in compilation errors.
type UnsafeSimServer interface {
	mustEmbedUnimplementedSimServer()
}

func RegisterSimServer(s grpc.ServiceRegistrar, srv SimServer) {
	s.RegisterService(&Sim_ServiceDesc, srv)
}

func _Sim_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sim_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimServer).Register(ctx, req.(*RegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sim_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sim_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sim_Chat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimServer).Chat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sim_Chat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimServer).Chat(ctx, req.(*ChatReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sim_BindWs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindWsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimServer).BindWs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sim_BindWs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimServer).BindWs(ctx, req.(*BindWsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Sim_ServiceDesc is the grpc.ServiceDesc for Sim service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Sim_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.sim.v1.Sim",
	HandlerType: (*SimServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Sim_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _Sim_Login_Handler,
		},
		{
			MethodName: "Chat",
			Handler:    _Sim_Chat_Handler,
		},
		{
			MethodName: "BindWs",
			Handler:    _Sim_BindWs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/sim.proto",
}
