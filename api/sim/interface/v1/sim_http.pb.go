// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.2
// - protoc             v4.25.1
// source: v1/sim.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationSimBindWs = "/api.sim.v1.Sim/BindWs"
const OperationSimChat = "/api.sim.v1.Sim/Chat"
const OperationSimLogin = "/api.sim.v1.Sim/Login"
const OperationSimRegister = "/api.sim.v1.Sim/Register"

type SimHTTPServer interface {
	BindWs(context.Context, *BindWsReq) (*BindWsReply, error)
	Chat(context.Context, *ChatReq) (*ChatReply, error)
	Login(context.Context, *LoginReq) (*LoginReply, error)
	Register(context.Context, *RegisterReq) (*RegisterReply, error)
}

func RegisterSimHTTPServer(s *http.Server, srv SimHTTPServer) {
	r := s.Route("/")
	r.POST("v1/register", _Sim_Register0_HTTP_Handler(srv))
	r.POST("v1/login", _Sim_Login0_HTTP_Handler(srv))
	r.POST("v1/chat", _Sim_Chat0_HTTP_Handler(srv))
	r.POST("v1/user/{user_id}/bind-ws", _Sim_BindWs0_HTTP_Handler(srv))
}

func _Sim_Register0_HTTP_Handler(srv SimHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RegisterReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSimRegister)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Register(ctx, req.(*RegisterReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RegisterReply)
		return ctx.Result(200, reply)
	}
}

func _Sim_Login0_HTTP_Handler(srv SimHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LoginReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSimLogin)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Login(ctx, req.(*LoginReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginReply)
		return ctx.Result(200, reply)
	}
}

func _Sim_Chat0_HTTP_Handler(srv SimHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ChatReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSimChat)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Chat(ctx, req.(*ChatReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ChatReply)
		return ctx.Result(200, reply)
	}
}

func _Sim_BindWs0_HTTP_Handler(srv SimHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in BindWsReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSimBindWs)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.BindWs(ctx, req.(*BindWsReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*BindWsReply)
		return ctx.Result(200, reply)
	}
}

type SimHTTPClient interface {
	BindWs(ctx context.Context, req *BindWsReq, opts ...http.CallOption) (rsp *BindWsReply, err error)
	Chat(ctx context.Context, req *ChatReq, opts ...http.CallOption) (rsp *ChatReply, err error)
	Login(ctx context.Context, req *LoginReq, opts ...http.CallOption) (rsp *LoginReply, err error)
	Register(ctx context.Context, req *RegisterReq, opts ...http.CallOption) (rsp *RegisterReply, err error)
}

type SimHTTPClientImpl struct {
	cc *http.Client
}

func NewSimHTTPClient(client *http.Client) SimHTTPClient {
	return &SimHTTPClientImpl{client}
}

func (c *SimHTTPClientImpl) BindWs(ctx context.Context, in *BindWsReq, opts ...http.CallOption) (*BindWsReply, error) {
	var out BindWsReply
	pattern := "v1/user/{user_id}/bind-ws"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSimBindWs))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *SimHTTPClientImpl) Chat(ctx context.Context, in *ChatReq, opts ...http.CallOption) (*ChatReply, error) {
	var out ChatReply
	pattern := "v1/chat"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSimChat))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *SimHTTPClientImpl) Login(ctx context.Context, in *LoginReq, opts ...http.CallOption) (*LoginReply, error) {
	var out LoginReply
	pattern := "v1/login"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSimLogin))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *SimHTTPClientImpl) Register(ctx context.Context, in *RegisterReq, opts ...http.CallOption) (*RegisterReply, error) {
	var out RegisterReply
	pattern := "v1/register"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSimRegister))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
